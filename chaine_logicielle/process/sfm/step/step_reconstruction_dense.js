var StepReconstructionDense = inherit(Step, {
    run: function() {
        var self = this;
        console.log('Début de l\'etape ' + this.getName());
        // une étape qui était en état d'erreur peut être relancée plusieurs fois, c'est pour cela qu'on doit remettre la progression à 0 à chaque nouveau run
        this.internalProgress = 0;
        this.totalEvents = 0;
        self.vsfm.vsfmSocket.write('33471 ' + path.resolve(self.vsfm.pathToImages) + '\\nvm\n');
    },
    getName: function() {
        return "Reconstruction dense du modèle 3D";
    },
    processLine: function(line) {
        if(this.__base(line)) {
            // TODO: progression
            // TODO: gérer erreur :
            // [LINE] ERROR: no points generated by pmvs2
            // [LINE] ERROR: pmvs2 crashed? not enough memory? 32bit?
            // 
            // PMVS génère des clusters d'au maximum x images
            // un cluster de x images prend en moyenne x secondes
            // rechercher et établir la progression grâce à ces données
            // faire une régression linéaire si le nb d'img dans le cluster est < au max
            var matches = /^Undistorting ([0-9]+) images/.exec(line);
            if(matches) {
                // TODO: rajouter un poids suivant le nombre de clusters prévus à partir du nombre d'images
                this.totalEvents = matches[1];
                this.vsfm.updateProgress((this.internalProgress / this.totalEvents) * 100);
            }
            else {
                var matches2 = /^#[0-9]+: /.exec(line);
                if(matches2) {
                    this.internalProgress++;
                    this.vsfm.updateProgress((this.internalProgress / this.totalEvents) * 100);
                }
            }
            return true;
        }
        return false;
    }
});